sdlog2 start -r 200 -e -b 22 -t
sercon
set MODE autostart
set FRC /fs/microsd/etc/rc.txt
set FCONFIG /fs/microsd/etc/config.txt
set TUNE_ERR ML<<CP4CP4CP4CP4CP4
echo "[i] Looking for microSD..."
if mount -t vfat /dev/mmcsd0 /fs/microsd
then
	set LOG_FILE /fs/microsd/bootlog.txt
	echo "[i] microSD mounted: /fs/microsd"
	tone_alarm start
else
	set LOG_FILE /dev/null
fi
if [ -f $FRC ]
then
	echo "[i] Executing init script: $FRC"
	sh $FRC
	set MODE custom
else
	echo "[i] Init script not found: $FRC"
fi
unset FRC
if [ $MODE == autostart ]
then
	nshterm /dev/ttyACM0 &
	uorb start
	set PARAM_FILE /fs/microsd/params
	if mtd start
	then
		set PARAM_FILE /fs/mtd_params
	fi
	param select $PARAM_FILE
	if param load
	then
		echo "[param] Loaded: $PARAM_FILE"
	else
		echo "[param] FAILED loading $PARAM_FILE"
		if param reset
		then
		fi
	fi
	if rgbled start
	then
	else
		if blinkm start
		then
			blinkm systemstate
		fi
	fi
	if pca8574 start
	then
	fi
	set HIL no
	set VEHICLE_TYPE none
	set MIXER none
	set MIXER_AUX none
	set OUTPUT_MODE none
	set PWM_OUT none
	set PWM_RATE none
	set PWM_DISARMED none
	set PWM_MIN none
	set PWM_MAX none
	set PWM_AUX_OUT none
	set PWM_AUX_RATE none
	set PWM_AUX_DISARMED none
	set PWM_AUX_MIN none
	set PWM_AUX_MAX none
	set MK_MODE none
	set FMU_MODE pwm
	set MAVLINK_F default
	set EXIT_ON_END no
	set MAV_TYPE none
	set LOAD_DAPPS yes
	set GPS yes
	set GPS_FAKE no
	set FAILSAFE none
	if param compare SYS_AUTOCONFIG 1
	then
		param reset_nostart RC*
		set AUTOCNF yes
	else
		set AUTOCNF no
	fi
	if param compare SYS_USE_IO 1
	then
		set USE_IO yes
	else
		set USE_IO no
	fi
	if param compare SYS_AUTOSTART 0
	then
		echo "[i] No autostart"
	else
		sh /etc/init.d/rc.autostart
	fi
	unset MODE
	if [ -f $FCONFIG ]
	then
		echo "[i] Config: $FCONFIG"
		sh $FCONFIG
	else
		echo "[i] Config not found: $FCONFIG"
	fi
	unset FCONFIG
	if [ $AUTOCNF == yes ]
	then
		param set SYS_AUTOCONFIG 0
		param save
	fi
	unset AUTOCNF
	set IO_PRESENT no
	if [ $USE_IO == yes ]
	then
		if [ -f /etc/extras/px4io-v2_default.bin ]
		then
			set IO_FILE /etc/extras/px4io-v2_default.bin
		else
			set IO_FILE /etc/extras/px4io-v1_default.bin
		fi
		if px4io checkcrc ${IO_FILE}
		then
			echo "PX4IO CRC OK" >> $LOG_FILE
			set IO_PRESENT yes
		else
			echo "PX4IO Trying to update" >> $LOG_FILE
			tone_alarm MLL32CP8MB
			if px4io start
			then
				if px4io safety_on
				then
				else
					px4io stop
				fi
			fi
			if px4io forceupdate 14662 ${IO_FILE}
			then
				usleep 500000
				if px4io checkcrc $IO_FILE
				then
					echo "PX4IO CRC OK after updating" >> $LOG_FILE
					tone_alarm MLL8CDE
					set IO_PRESENT yes
				else
					echo "PX4IO update failed" >> $LOG_FILE
					tone_alarm $TUNE_ERR
				fi
			else
				echo "PX4IO update failed" >> $LOG_FILE
				tone_alarm $TUNE_ERR
			fi
		fi
		unset IO_FILE
		if [ $IO_PRESENT == no ]
		then
			echo "[i] ERROR: PX4IO not found"
			tone_alarm $TUNE_ERR
		fi
	fi
	if [ $OUTPUT_MODE == none ]
	then
		if [ $USE_IO == yes ]
		then
			set OUTPUT_MODE io
		else
			set OUTPUT_MODE fmu
		fi
	fi
	if [ $OUTPUT_MODE == io -a $IO_PRESENT != yes ]
	then
		set OUTPUT_MODE none
		echo "[i] ERROR: PX4IO not found, disabling output"
		if ver hwcmp PX4FMU_V1
		then
			set FMU_MODE serial
		fi
	fi
	if [ $OUTPUT_MODE == ardrone ]
	then
		set FMU_MODE gpio_serial
	fi
	if [ $HIL == yes ]
	then
		set OUTPUT_MODE hil
		if ver hwcmp PX4FMU_V1
		then
			set FMU_MODE serial
		fi
	fi
	unset HIL
	if dataman start
	then
	fi
	commander start
	set TTYS1_BUSY no
	if [ $OUTPUT_MODE != none ]
	then
		if [ $OUTPUT_MODE == uavcan_esc ]
		then
			if param compare UAVCAN_ENABLE 0
			then
				echo "[i] OVERRIDING UAVCAN_ENABLE = 1"
				param set UAVCAN_ENABLE 1
			fi
		fi
		if [ $OUTPUT_MODE == io -o $OUTPUT_MODE == uavcan_esc ]
		then
			if px4io start
			then
				echo "[i] PX4IO started"
				sh /etc/init.d/rc.io
			else
				echo "[i] ERROR: PX4IO start failed"
				tone_alarm $TUNE_ERR
			fi
		fi
		if [ $OUTPUT_MODE == fmu -o $OUTPUT_MODE == ardrone ]
		then
			if fmu mode_$FMU_MODE
			then
				echo "[i] FMU mode_$FMU_MODE started"
			else
				echo "[i] ERROR: FMU mode_$FMU_MODE start failed"
				tone_alarm $TUNE_ERR
			fi
			if ver hwcmp PX4FMU_V1
			then
				if [ $FMU_MODE == pwm -o $FMU_MODE == gpio ]
				then
					set TTYS1_BUSY yes
				fi
				if [ $FMU_MODE == pwm_gpio -o $OUTPUT_MODE == ardrone ]
				then
					set TTYS1_BUSY yes
				fi
			fi
		fi
		if [ $OUTPUT_MODE == mkblctrl ]
		then
			set MKBLCTRL_ARG ""
			if [ $MKBLCTRL_MODE == x ]
			then
				set MKBLCTRL_ARG "-mkmode x"
			fi
			if [ $MKBLCTRL_MODE == + ]
			then
				set MKBLCTRL_ARG "-mkmode +"
			fi
			if mkblctrl $MKBLCTRL_ARG
			then
				echo "[i] MK started"
			else
				echo "[i] ERROR: MK start failed"
				tone_alarm $TUNE_ERR
			fi
			unset MKBLCTRL_ARG
		fi
		unset MK_MODE
		if [ $OUTPUT_MODE == hil ]
		then
			if hil mode_port2_pwm8
			then
				echo "[i] HIL output started"
			else
				echo "[i] ERROR: HIL output start failed"
				tone_alarm $TUNE_ERR
			fi
		fi
		if [ $IO_PRESENT == yes ]
		then
			if [ $OUTPUT_MODE != io ]
			then
				if px4io start
				then
					echo "[i] PX4IO started"
					sh /etc/init.d/rc.io
				else
					echo "[i] ERROR: PX4IO start failed"
					tone_alarm $TUNE_ERR
				fi
			fi
		else
			if [ $OUTPUT_MODE != fmu -a $OUTPUT_MODE != ardrone ]
			then
				if fmu mode_$FMU_MODE
				then
					echo "[i] FMU mode_$FMU_MODE started"
				else
					echo "[i] ERROR: FMU mode_$FMU_MODE start failed"
					tone_alarm $TUNE_ERR
				fi
				if ver hwcmp PX4FMU_V1
				then
					if [ $FMU_MODE == pwm -o $FMU_MODE == gpio ]
					then
						set TTYS1_BUSY yes
					fi
					if [ $FMU_MODE == pwm_gpio -o $OUTPUT_MODE == ardrone ]
					then
						set TTYS1_BUSY yes
					fi
				fi
			fi
		fi
	fi
	if [ $MAVLINK_F == default ]
	then
		if [ $TTYS1_BUSY == yes ]
		then
			set MAVLINK_F "-r 1000 -d /dev/ttyS0"
			set EXIT_ON_END yes
		else
			set MAVLINK_F "-r 1000"
		fi
	fi
	mavlink start $MAVLINK_F
	mavlink stream -d /dev/ttyS1 -s ATTITUDE -r 20
	mavlink stream -d /dev/ttyS1 -s RC_CHANNELS_RAW -r 20
	mavlink stream -d /dev/ttyS1 -s VISION_POSITION_ESTIMATE -r 20
	mavlink stream -d /dev/ttyS1 -s ATTITUDE_QUATERNION -r 20
	unset MAVLINK_F
	if ver hwcmp PX4FMU_V2
	then
		if param compare SYS_COMPANION 921600
		then
			mavlink start -d /dev/ttyS2 -b 921600 -m onboard -r 20000
		fi
	fi
	sh /etc/init.d/rc.uavcan
	sh /etc/init.d/rc.sensors
	sh /etc/init.d/rc.logging
	if [ $GPS == yes ]
	then
		if [ $GPS_FAKE == yes ]
		then
			echo "[i] Faking GPS"
			gps start -f
		else
			gps start
		fi
	fi
	unset GPS_FAKE
	if [ $OUTPUT_MODE == ardrone ]
	then
		ardrone_interface start -d /dev/ttyS1
	fi
	if [ $VEHICLE_TYPE == fw ]
	then
		echo "[i] FIXED WING"
		if [ $MIXER == none ]
		then
			set MIXER AERT
		fi
		if [ $MAV_TYPE == none ]
		then
			set MAV_TYPE 1
		fi
		param set MAV_TYPE $MAV_TYPE
		sh /etc/init.d/rc.interface
		if [ $LOAD_DAPPS == yes ]
		then
			sh /etc/init.d/rc.fw_apps
		fi
	fi
	if [ $VEHICLE_TYPE == mc ]
	then
		echo "[i] MULTICOPTER"
		if [ $MIXER == none ]
		then
			echo "Mixer undefined"
		fi
		if [ $MAV_TYPE == none ]
		then
			if [ $MIXER == quad_x -o $MIXER == quad_+ ]
			then
				set MAV_TYPE 2
			fi
			if [ $MIXER == quad_w -o $MIXER == sk450_deadcat ]
			then
				set MAV_TYPE 2
			fi
			if [ $MIXER == tri_y_yaw- -o $MIXER == tri_y_yaw+ ]
			then
				set MAV_TYPE 2
			fi
			if [ $MIXER == hexa_x -o $MIXER == hexa_+ ]
			then
				set MAV_TYPE 13
			fi
			if [ $MIXER == hexa_cox ]
			then
				set MAV_TYPE 13
			fi
			if [ $MIXER == octo_x -o $MIXER == octo_+ ]
			then
				set MAV_TYPE 14
			fi
			if [ $MIXER == octo_cox ]
			then
				set MAV_TYPE 14
			fi
		fi
		if [ $MAV_TYPE == none ]
		then
			echo "Unknown MAV_TYPE"
		else
			param set MAV_TYPE $MAV_TYPE
		fi
		sh /etc/init.d/rc.interface
		if [ $LOAD_DAPPS == yes ]
		then
			sh /etc/init.d/rc.mc_apps
		fi
	fi
	if [ $VEHICLE_TYPE == vtol ]
	then
		echo "[init] Vehicle type: VTOL"
		if [ $MIXER == none ]
		then
			echo "Default mixer for vtol not defined"
		fi
		if [ $MAV_TYPE == none ]
		then
			if [ $MIXER == caipirinha_vtol ]
			then
				set MAV_TYPE 19
			fi
			if [ $MIXER == firefly6_rotors ]
			then
				set MAV_TYPE 21
			fi
		fi
		if [ $MAV_TYPE == none ]
		then
			echo "Unknown MAV_TYPE"
		else
			param set MAV_TYPE $MAV_TYPE
		fi
		sh /etc/init.d/rc.interface
		if [ $LOAD_DAPPS == yes ]
		then
			sh /etc/init.d/rc.vtol_apps
		fi
	fi
	if [ $VEHICLE_TYPE == rover ]
	then
		set MAV_TYPE 10
		sh /etc/init.d/rc.interface
		if [ $LOAD_DAPPS == yes ]
		then
			sh /etc/init.d/rc.rover_apps
		fi
	fi
	unset MIXER
	unset MAV_TYPE
	unset OUTPUT_MODE
	navigator start
	if [ $VEHICLE_TYPE == none ]
	then
		echo "[i] No autostart ID found"
	fi
	set FEXTRAS /fs/microsd/etc/extras.txt
	if [ -f $FEXTRAS ]
	then
		echo "[i] Addons script: $FEXTRAS"
		sh $FEXTRAS
	else
		echo "[i] No addons script: $FEXTRAS"
	fi
	unset FEXTRAS
	if [ $EXIT_ON_END == yes ]
	then
		echo "Exit from nsh"
		exit
	fi
	unset EXIT_ON_END
	if [ $LOG_FILE == /dev/null ]
	then
		echo "[i] No microSD card found"
		tone_alarm error
	fi
fi
unset TUNE_ERR
