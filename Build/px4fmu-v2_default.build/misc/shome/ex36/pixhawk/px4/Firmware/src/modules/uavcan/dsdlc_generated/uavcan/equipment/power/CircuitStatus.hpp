/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /misc/shome/ex36/pixhawk/px4/Firmware/src/lib/uavcan/dsdl/uavcan/equipment/power/711.CircuitStatus.uavcan
 */

#pragma once

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Generic electrical circuit info.
#

uint16 circuit_id

float16 voltage
float16 current

uint8 ERROR_MASK_OVERVOLTAGE  = 1
uint8 ERROR_MASK_UNDERVOLTAGE = 2
uint8 ERROR_MASK_OVERCURRENT  = 4
uint8 ERROR_MASK_UNDERCURRENT = 8
uint8 error_mask
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.power.CircuitStatus
saturated uint16 circuit_id
saturated float16 voltage
saturated float16 current
saturated uint8 error_mask
saturated uint8 ERROR_MASK_OVERCURRENT = 4
saturated uint8 ERROR_MASK_OVERVOLTAGE = 1
saturated uint8 ERROR_MASK_UNDERCURRENT = 8
saturated uint8 ERROR_MASK_UNDERVOLTAGE = 2
******************************************************************************/

#undef circuit_id
#undef voltage
#undef current
#undef error_mask
#undef ERROR_MASK_OVERVOLTAGE
#undef ERROR_MASK_UNDERVOLTAGE
#undef ERROR_MASK_OVERCURRENT
#undef ERROR_MASK_UNDERCURRENT

#ifndef UAVCAN_PACK_STRUCTS
# error UAVCAN_PACK_STRUCTS
#endif

namespace uavcan
{
namespace equipment
{
namespace power
{

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_BEGIN
#endif

template <int _tmpl>
struct UAVCAN_EXPORT CircuitStatus_
{
    typedef const CircuitStatus_<_tmpl>& ParameterType;
    typedef CircuitStatus_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ERROR_MASK_OVERVOLTAGE;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ERROR_MASK_UNDERVOLTAGE;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ERROR_MASK_OVERCURRENT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ERROR_MASK_UNDERCURRENT;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > circuit_id;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > voltage;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > current;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > error_mask;
    };

    enum
    {
        MinBitLen
            = FieldTypes::circuit_id::MinBitLen
            + FieldTypes::voltage::MinBitLen
            + FieldTypes::current::MinBitLen
            + FieldTypes::error_mask::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::circuit_id::MaxBitLen
            + FieldTypes::voltage::MaxBitLen
            + FieldTypes::current::MaxBitLen
            + FieldTypes::error_mask::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::ERROR_MASK_OVERVOLTAGE >::Type ERROR_MASK_OVERVOLTAGE; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::ERROR_MASK_UNDERVOLTAGE >::Type ERROR_MASK_UNDERVOLTAGE; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::ERROR_MASK_OVERCURRENT >::Type ERROR_MASK_OVERCURRENT; // 4
    static const typename ::uavcan::StorageType< typename ConstantTypes::ERROR_MASK_UNDERCURRENT >::Type ERROR_MASK_UNDERCURRENT; // 8

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::circuit_id >::Type circuit_id;
    typename ::uavcan::StorageType< typename FieldTypes::voltage >::Type voltage;
    typename ::uavcan::StorageType< typename FieldTypes::current >::Type current;
    typename ::uavcan::StorageType< typename FieldTypes::error_mask >::Type error_mask;

    CircuitStatus_()
        : circuit_id()
        , voltage()
        , current()
        , error_mask()
    {
        enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
        ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<56 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 711 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.equipment.power.CircuitStatus";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_END
#endif

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool CircuitStatus_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        circuit_id == rhs.circuit_id &&
        voltage == rhs.voltage &&
        current == rhs.current &&
        error_mask == rhs.error_mask;
}

template <int _tmpl>
bool CircuitStatus_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(circuit_id, rhs.circuit_id) &&
        ::uavcan::areClose(voltage, rhs.voltage) &&
        ::uavcan::areClose(current, rhs.current) &&
        ::uavcan::areClose(error_mask, rhs.error_mask);
}

template <int _tmpl>
int CircuitStatus_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::circuit_id::encode(self.circuit_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::encode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::encode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::error_mask::encode(self.error_mask, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int CircuitStatus_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::circuit_id::decode(self.circuit_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::decode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::decode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::error_mask::decode(self.error_mask, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature CircuitStatus_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xFBADCF46975453B3ULL);

    FieldTypes::circuit_id::extendDataTypeSignature(signature);
    FieldTypes::voltage::extendDataTypeSignature(signature);
    FieldTypes::current::extendDataTypeSignature(signature);
    FieldTypes::error_mask::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename CircuitStatus_<_tmpl>::ConstantTypes::ERROR_MASK_OVERVOLTAGE >::Type
    CircuitStatus_<_tmpl>::ERROR_MASK_OVERVOLTAGE = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename CircuitStatus_<_tmpl>::ConstantTypes::ERROR_MASK_UNDERVOLTAGE >::Type
    CircuitStatus_<_tmpl>::ERROR_MASK_UNDERVOLTAGE = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename CircuitStatus_<_tmpl>::ConstantTypes::ERROR_MASK_OVERCURRENT >::Type
    CircuitStatus_<_tmpl>::ERROR_MASK_OVERCURRENT = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename CircuitStatus_<_tmpl>::ConstantTypes::ERROR_MASK_UNDERCURRENT >::Type
    CircuitStatus_<_tmpl>::ERROR_MASK_UNDERCURRENT = 8U; // 8

/*
 * Final typedef
 */
typedef CircuitStatus_<0> CircuitStatus;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::equipment::power::CircuitStatus > _uavcan_gdtr_registrator_CircuitStatus;

}

} // Namespace uavcan
} // Namespace equipment
} // Namespace power

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::equipment::power::CircuitStatus >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::equipment::power::CircuitStatus::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::equipment::power::CircuitStatus >::stream(Stream& s, ::uavcan::equipment::power::CircuitStatus::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "circuit_id: ";
    YamlStreamer< ::uavcan::equipment::power::CircuitStatus::FieldTypes::circuit_id >::stream(s, obj.circuit_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "voltage: ";
    YamlStreamer< ::uavcan::equipment::power::CircuitStatus::FieldTypes::voltage >::stream(s, obj.voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current: ";
    YamlStreamer< ::uavcan::equipment::power::CircuitStatus::FieldTypes::current >::stream(s, obj.current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "error_mask: ";
    YamlStreamer< ::uavcan::equipment::power::CircuitStatus::FieldTypes::error_mask >::stream(s, obj.error_mask, level + 1);
}

}

namespace uavcan
{
namespace equipment
{
namespace power
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::equipment::power::CircuitStatus::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::equipment::power::CircuitStatus >::stream(s, obj, 0);
    return s;
}

}
}
}