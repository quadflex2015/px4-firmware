/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /misc/shome/ex36/pixhawk/px4/Firmware/src/lib/uavcan/dsdl/uavcan/protocol/552.GetDataTypeInfo.uavcan
 */

#pragma once

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <uavcan/protocol/DataTypeKind.hpp>

/******************************* Source text **********************************
#
# Get the implementation details of a given data type.
#

uint16 id
DataTypeKind kind

---

uint64 signature            # Data type signature

uint8 MASK_KNOWN      = 1   # This data type is defined
uint8 MASK_SUBSCRIBED = 2   # Subscribed to messages of this type
uint8 MASK_PUBLISHING = 4   # Publishing messages of this type
uint8 MASK_SERVING    = 8   # Providing service of this type
uint8 mask

uint8[<=80] name            # Full data type name, e.g. "uavcan.protocol.GetDataTypeInfo"
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.protocol.GetDataTypeInfo
saturated uint16 id
uavcan.protocol.DataTypeKind kind
---
saturated uint64 signature
saturated uint8 mask
saturated uint8[<=80] name
saturated uint8 MASK_KNOWN = 1
saturated uint8 MASK_PUBLISHING = 4
saturated uint8 MASK_SERVING = 8
saturated uint8 MASK_SUBSCRIBED = 2
******************************************************************************/

#undef id
#undef kind
#undef signature
#undef mask
#undef name
#undef MASK_KNOWN
#undef MASK_SUBSCRIBED
#undef MASK_PUBLISHING
#undef MASK_SERVING

#ifndef UAVCAN_PACK_STRUCTS
# error UAVCAN_PACK_STRUCTS
#endif

namespace uavcan
{
namespace protocol
{

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_BEGIN
#endif

struct UAVCAN_EXPORT GetDataTypeInfo_
{
    template <int _tmpl>
    struct Request_
    {
        typedef const Request_<_tmpl>& ParameterType;
        typedef Request_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
            typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > id;
            typedef ::uavcan::protocol::DataTypeKind kind;
        };

        enum
        {
            MinBitLen
                = FieldTypes::id::MinBitLen
                + FieldTypes::kind::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::id::MaxBitLen
                + FieldTypes::kind::MaxBitLen
        };

        // Constants

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::id >::Type id;
        typename ::uavcan::StorageType< typename FieldTypes::kind >::Type kind;

        Request_()
            : id()
            , kind()
        {
            enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
            ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<18 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);
    };

    template <int _tmpl>
    struct Response_
    {
        typedef const Response_<_tmpl>& ParameterType;
        typedef Response_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MASK_KNOWN;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MASK_SUBSCRIBED;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MASK_PUBLISHING;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MASK_SERVING;
        };

        struct FieldTypes
        {
            typedef ::uavcan::IntegerSpec< 64, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > signature;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > mask;
            typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 80 > name;
        };

        enum
        {
            MinBitLen
                = FieldTypes::signature::MinBitLen
                + FieldTypes::mask::MinBitLen
                + FieldTypes::name::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::signature::MaxBitLen
                + FieldTypes::mask::MaxBitLen
                + FieldTypes::name::MaxBitLen
        };

        // Constants
        static const typename ::uavcan::StorageType< typename ConstantTypes::MASK_KNOWN >::Type MASK_KNOWN; // 1
        static const typename ::uavcan::StorageType< typename ConstantTypes::MASK_SUBSCRIBED >::Type MASK_SUBSCRIBED; // 2
        static const typename ::uavcan::StorageType< typename ConstantTypes::MASK_PUBLISHING >::Type MASK_PUBLISHING; // 4
        static const typename ::uavcan::StorageType< typename ConstantTypes::MASK_SERVING >::Type MASK_SERVING; // 8

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::signature >::Type signature;
        typename ::uavcan::StorageType< typename FieldTypes::mask >::Type mask;
        typename ::uavcan::StorageType< typename FieldTypes::name >::Type name;

        Response_()
            : signature()
            , mask()
            , name()
        {
            enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
            ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<719 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);
    };

    typedef Request_<0> Request;
    typedef Response_<0> Response;

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 552 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.GetDataTypeInfo";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

private:
    GetDataTypeInfo_(); // Don't create objects of this type. Use Request/Response instead.
};

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_END
#endif

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool GetDataTypeInfo_::Request_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        id == rhs.id &&
        kind == rhs.kind;
}

template <int _tmpl>
bool GetDataTypeInfo_::Request_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(id, rhs.id) &&
        ::uavcan::areClose(kind, rhs.kind);
}

template <int _tmpl>
int GetDataTypeInfo_::Request_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::id::encode(self.id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::kind::encode(self.kind, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int GetDataTypeInfo_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::id::decode(self.id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::kind::decode(self.kind, codec,  tao_mode);
    return res;
}

template <int _tmpl>
bool GetDataTypeInfo_::Response_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        signature == rhs.signature &&
        mask == rhs.mask &&
        name == rhs.name;
}

template <int _tmpl>
bool GetDataTypeInfo_::Response_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(signature, rhs.signature) &&
        ::uavcan::areClose(mask, rhs.mask) &&
        ::uavcan::areClose(name, rhs.name);
}

template <int _tmpl>
int GetDataTypeInfo_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::signature::encode(self.signature, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::mask::encode(self.mask, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::name::encode(self.name, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int GetDataTypeInfo_::Response_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::signature::decode(self.signature, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::mask::decode(self.mask, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::name::decode(self.name, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature GetDataTypeInfo_::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xE2CB57232D796E24ULL);

    Request::FieldTypes::id::extendDataTypeSignature(signature);
    Request::FieldTypes::kind::extendDataTypeSignature(signature);

    Response::FieldTypes::signature::extendDataTypeSignature(signature);
    Response::FieldTypes::mask::extendDataTypeSignature(signature);
    Response::FieldTypes::name::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename GetDataTypeInfo_::Response_<_tmpl>::ConstantTypes::MASK_KNOWN >::Type
    GetDataTypeInfo_::Response_<_tmpl>::MASK_KNOWN = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename GetDataTypeInfo_::Response_<_tmpl>::ConstantTypes::MASK_SUBSCRIBED >::Type
    GetDataTypeInfo_::Response_<_tmpl>::MASK_SUBSCRIBED = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename GetDataTypeInfo_::Response_<_tmpl>::ConstantTypes::MASK_PUBLISHING >::Type
    GetDataTypeInfo_::Response_<_tmpl>::MASK_PUBLISHING = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename GetDataTypeInfo_::Response_<_tmpl>::ConstantTypes::MASK_SERVING >::Type
    GetDataTypeInfo_::Response_<_tmpl>::MASK_SERVING = 8U; // 8

/*
 * Final typedef
 */
typedef GetDataTypeInfo_ GetDataTypeInfo;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::GetDataTypeInfo > _uavcan_gdtr_registrator_GetDataTypeInfo;

}

} // Namespace uavcan
} // Namespace protocol

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Request >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::protocol::GetDataTypeInfo::Request::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Request >::stream(Stream& s, ::uavcan::protocol::GetDataTypeInfo::Request::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "id: ";
    YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Request::FieldTypes::id >::stream(s, obj.id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "kind: ";
    YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Request::FieldTypes::kind >::stream(s, obj.kind, level + 1);
}

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Response >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::protocol::GetDataTypeInfo::Response::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Response >::stream(Stream& s, ::uavcan::protocol::GetDataTypeInfo::Response::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "signature: ";
    YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Response::FieldTypes::signature >::stream(s, obj.signature, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "mask: ";
    YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Response::FieldTypes::mask >::stream(s, obj.mask, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "name: ";
    YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Response::FieldTypes::name >::stream(s, obj.name, level + 1);
}

}

namespace uavcan
{
namespace protocol
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::protocol::GetDataTypeInfo::Request::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Request >::stream(s, obj, 0);
    return s;
}

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::protocol::GetDataTypeInfo::Response::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::protocol::GetDataTypeInfo::Response >::stream(s, obj, 0);
    return s;
}

}
}