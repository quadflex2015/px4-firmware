/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /misc/shome/ex36/pixhawk/px4/Firmware/src/lib/uavcan/dsdl/uavcan/equipment/actuator/Command.uavcan
 */

#pragma once

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Nested type.
# Single actuator command.
#

uint8 actuator_id
float16 command     # Any units. For a generic servo use [-1; 1].
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.actuator.Command
saturated uint8 actuator_id
saturated float16 command
******************************************************************************/

#undef actuator_id
#undef command

#ifndef UAVCAN_PACK_STRUCTS
# error UAVCAN_PACK_STRUCTS
#endif

namespace uavcan
{
namespace equipment
{
namespace actuator
{

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_BEGIN
#endif

template <int _tmpl>
struct UAVCAN_EXPORT Command_
{
    typedef const Command_<_tmpl>& ParameterType;
    typedef Command_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > actuator_id;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > command;
    };

    enum
    {
        MinBitLen
            = FieldTypes::actuator_id::MinBitLen
            + FieldTypes::command::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::actuator_id::MaxBitLen
            + FieldTypes::command::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::actuator_id >::Type actuator_id;
    typename ::uavcan::StorageType< typename FieldTypes::command >::Type command;

    Command_()
        : actuator_id()
        , command()
    {
        enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
        ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<24 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "uavcan.equipment.actuator.Command";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_END
#endif

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Command_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        actuator_id == rhs.actuator_id &&
        command == rhs.command;
}

template <int _tmpl>
bool Command_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(actuator_id, rhs.actuator_id) &&
        ::uavcan::areClose(command, rhs.command);
}

template <int _tmpl>
int Command_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::actuator_id::encode(self.actuator_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::command::encode(self.command, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Command_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::actuator_id::decode(self.actuator_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::command::decode(self.command, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Command_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x7584396F4EFA576AULL);

    FieldTypes::actuator_id::extendDataTypeSignature(signature);
    FieldTypes::command::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Command_<0> Command;

// No default registration

} // Namespace uavcan
} // Namespace equipment
} // Namespace actuator

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::equipment::actuator::Command >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::equipment::actuator::Command::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::equipment::actuator::Command >::stream(Stream& s, ::uavcan::equipment::actuator::Command::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "actuator_id: ";
    YamlStreamer< ::uavcan::equipment::actuator::Command::FieldTypes::actuator_id >::stream(s, obj.actuator_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "command: ";
    YamlStreamer< ::uavcan::equipment::actuator::Command::FieldTypes::command >::stream(s, obj.command, level + 1);
}

}

namespace uavcan
{
namespace equipment
{
namespace actuator
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::equipment::actuator::Command::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::equipment::actuator::Command >::stream(s, obj, 0);
    return s;
}

}
}
}