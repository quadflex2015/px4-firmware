/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /misc/shome/ex36/pixhawk/px4/Firmware/src/lib/uavcan/dsdl/uavcan/equipment/air_data/284.StaticAirData.uavcan
 */

#pragma once

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Static air data for barometric altitude and altitude rate measurements.
#

float32 static_pressure                 # Pascal
float16 static_pressure_variance        # Pascal^2

float16 static_temperature              # Kelvin
float16 static_temperature_variance     # Kelvin^2
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.air_data.StaticAirData
saturated float32 static_pressure
saturated float16 static_pressure_variance
saturated float16 static_temperature
saturated float16 static_temperature_variance
******************************************************************************/

#undef static_pressure
#undef static_pressure_variance
#undef static_temperature
#undef static_temperature_variance

#ifndef UAVCAN_PACK_STRUCTS
# error UAVCAN_PACK_STRUCTS
#endif

namespace uavcan
{
namespace equipment
{
namespace air_data
{

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_BEGIN
#endif

template <int _tmpl>
struct UAVCAN_EXPORT StaticAirData_
{
    typedef const StaticAirData_<_tmpl>& ParameterType;
    typedef StaticAirData_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > static_pressure;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > static_pressure_variance;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > static_temperature;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > static_temperature_variance;
    };

    enum
    {
        MinBitLen
            = FieldTypes::static_pressure::MinBitLen
            + FieldTypes::static_pressure_variance::MinBitLen
            + FieldTypes::static_temperature::MinBitLen
            + FieldTypes::static_temperature_variance::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::static_pressure::MaxBitLen
            + FieldTypes::static_pressure_variance::MaxBitLen
            + FieldTypes::static_temperature::MaxBitLen
            + FieldTypes::static_temperature_variance::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::static_pressure >::Type static_pressure;
    typename ::uavcan::StorageType< typename FieldTypes::static_pressure_variance >::Type static_pressure_variance;
    typename ::uavcan::StorageType< typename FieldTypes::static_temperature >::Type static_temperature;
    typename ::uavcan::StorageType< typename FieldTypes::static_temperature_variance >::Type static_temperature_variance;

    StaticAirData_()
        : static_pressure()
        , static_pressure_variance()
        , static_temperature()
        , static_temperature_variance()
    {
        enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
        ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<80 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 284 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.equipment.air_data.StaticAirData";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_END
#endif

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool StaticAirData_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        static_pressure == rhs.static_pressure &&
        static_pressure_variance == rhs.static_pressure_variance &&
        static_temperature == rhs.static_temperature &&
        static_temperature_variance == rhs.static_temperature_variance;
}

template <int _tmpl>
bool StaticAirData_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(static_pressure, rhs.static_pressure) &&
        ::uavcan::areClose(static_pressure_variance, rhs.static_pressure_variance) &&
        ::uavcan::areClose(static_temperature, rhs.static_temperature) &&
        ::uavcan::areClose(static_temperature_variance, rhs.static_temperature_variance);
}

template <int _tmpl>
int StaticAirData_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::static_pressure::encode(self.static_pressure, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::static_pressure_variance::encode(self.static_pressure_variance, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::static_temperature::encode(self.static_temperature, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::static_temperature_variance::encode(self.static_temperature_variance, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int StaticAirData_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::static_pressure::decode(self.static_pressure, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::static_pressure_variance::decode(self.static_pressure_variance, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::static_temperature::decode(self.static_temperature, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::static_temperature_variance::decode(self.static_temperature_variance, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature StaticAirData_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x4F206610052B1655ULL);

    FieldTypes::static_pressure::extendDataTypeSignature(signature);
    FieldTypes::static_pressure_variance::extendDataTypeSignature(signature);
    FieldTypes::static_temperature::extendDataTypeSignature(signature);
    FieldTypes::static_temperature_variance::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef StaticAirData_<0> StaticAirData;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::equipment::air_data::StaticAirData > _uavcan_gdtr_registrator_StaticAirData;

}

} // Namespace uavcan
} // Namespace equipment
} // Namespace air_data

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::equipment::air_data::StaticAirData >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::equipment::air_data::StaticAirData::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::equipment::air_data::StaticAirData >::stream(Stream& s, ::uavcan::equipment::air_data::StaticAirData::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "static_pressure: ";
    YamlStreamer< ::uavcan::equipment::air_data::StaticAirData::FieldTypes::static_pressure >::stream(s, obj.static_pressure, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "static_pressure_variance: ";
    YamlStreamer< ::uavcan::equipment::air_data::StaticAirData::FieldTypes::static_pressure_variance >::stream(s, obj.static_pressure_variance, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "static_temperature: ";
    YamlStreamer< ::uavcan::equipment::air_data::StaticAirData::FieldTypes::static_temperature >::stream(s, obj.static_temperature, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "static_temperature_variance: ";
    YamlStreamer< ::uavcan::equipment::air_data::StaticAirData::FieldTypes::static_temperature_variance >::stream(s, obj.static_temperature_variance, level + 1);
}

}

namespace uavcan
{
namespace equipment
{
namespace air_data
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::equipment::air_data::StaticAirData::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::equipment::air_data::StaticAirData >::stream(s, obj, 0);
    return s;
}

}
}
}