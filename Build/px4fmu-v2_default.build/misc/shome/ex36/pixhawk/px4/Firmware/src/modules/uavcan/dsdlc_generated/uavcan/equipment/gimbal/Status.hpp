/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /misc/shome/ex36/pixhawk/px4/Firmware/src/lib/uavcan/dsdl/uavcan/equipment/gimbal/393.Status.uavcan
 */

#pragma once

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Generic gimbal status.
#

uint4 MODE_ANGULAR_VELOCITY        = 0
uint4 MODE_ORIENTATION_FIXED_FRAME = 1
uint4 MODE_ORIENTATION_BODY_FRAME  = 2
uint4 MODE_GEO_POI                 = 3
uint4 mode

# Camera axis orientation in body frame (not in fixed frame).
# In case if the gimbal can only measure orientation relative to the fixed frame (e.g. using a dedicated IMU),
# it shall transform the orientation into the body frame automatically.
float16[4] body_frame_orientation_xyzw
float16[<=9] body_frame_orientation_covariance   # +inf for non-existent axes
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.gimbal.Status
saturated uint4 mode
saturated float16[4] body_frame_orientation_xyzw
saturated float16[<=9] body_frame_orientation_covariance
saturated uint4 MODE_ANGULAR_VELOCITY = 0
saturated uint4 MODE_GEO_POI = 3
saturated uint4 MODE_ORIENTATION_BODY_FRAME = 2
saturated uint4 MODE_ORIENTATION_FIXED_FRAME = 1
******************************************************************************/

#undef mode
#undef body_frame_orientation_xyzw
#undef body_frame_orientation_covariance
#undef MODE_ANGULAR_VELOCITY
#undef MODE_ORIENTATION_FIXED_FRAME
#undef MODE_ORIENTATION_BODY_FRAME
#undef MODE_GEO_POI

#ifndef UAVCAN_PACK_STRUCTS
# error UAVCAN_PACK_STRUCTS
#endif

namespace uavcan
{
namespace equipment
{
namespace gimbal
{

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_BEGIN
#endif

template <int _tmpl>
struct UAVCAN_EXPORT Status_
{
    typedef const Status_<_tmpl>& ParameterType;
    typedef Status_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MODE_ANGULAR_VELOCITY;
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MODE_ORIENTATION_FIXED_FRAME;
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MODE_ORIENTATION_BODY_FRAME;
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MODE_GEO_POI;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > mode;
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 4 > body_frame_orientation_xyzw;
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 9 > body_frame_orientation_covariance;
    };

    enum
    {
        MinBitLen
            = FieldTypes::mode::MinBitLen
            + FieldTypes::body_frame_orientation_xyzw::MinBitLen
            + FieldTypes::body_frame_orientation_covariance::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::mode::MaxBitLen
            + FieldTypes::body_frame_orientation_xyzw::MaxBitLen
            + FieldTypes::body_frame_orientation_covariance::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::MODE_ANGULAR_VELOCITY >::Type MODE_ANGULAR_VELOCITY; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::MODE_ORIENTATION_FIXED_FRAME >::Type MODE_ORIENTATION_FIXED_FRAME; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::MODE_ORIENTATION_BODY_FRAME >::Type MODE_ORIENTATION_BODY_FRAME; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::MODE_GEO_POI >::Type MODE_GEO_POI; // 3

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::mode >::Type mode;
    typename ::uavcan::StorageType< typename FieldTypes::body_frame_orientation_xyzw >::Type body_frame_orientation_xyzw;
    typename ::uavcan::StorageType< typename FieldTypes::body_frame_orientation_covariance >::Type body_frame_orientation_covariance;

    Status_()
        : mode()
        , body_frame_orientation_xyzw()
        , body_frame_orientation_covariance()
    {
        enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
        ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<216 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 393 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.equipment.gimbal.Status";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_END
#endif

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Status_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        mode == rhs.mode &&
        body_frame_orientation_xyzw == rhs.body_frame_orientation_xyzw &&
        body_frame_orientation_covariance == rhs.body_frame_orientation_covariance;
}

template <int _tmpl>
bool Status_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(mode, rhs.mode) &&
        ::uavcan::areClose(body_frame_orientation_xyzw, rhs.body_frame_orientation_xyzw) &&
        ::uavcan::areClose(body_frame_orientation_covariance, rhs.body_frame_orientation_covariance);
}

template <int _tmpl>
int Status_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::mode::encode(self.mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::body_frame_orientation_xyzw::encode(self.body_frame_orientation_xyzw, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::body_frame_orientation_covariance::encode(self.body_frame_orientation_covariance, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Status_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::mode::decode(self.mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::body_frame_orientation_xyzw::decode(self.body_frame_orientation_xyzw, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::body_frame_orientation_covariance::decode(self.body_frame_orientation_covariance, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Status_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x1EAF0607C8F90689ULL);

    FieldTypes::mode::extendDataTypeSignature(signature);
    FieldTypes::body_frame_orientation_xyzw::extendDataTypeSignature(signature);
    FieldTypes::body_frame_orientation_covariance::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename Status_<_tmpl>::ConstantTypes::MODE_ANGULAR_VELOCITY >::Type
    Status_<_tmpl>::MODE_ANGULAR_VELOCITY = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename Status_<_tmpl>::ConstantTypes::MODE_ORIENTATION_FIXED_FRAME >::Type
    Status_<_tmpl>::MODE_ORIENTATION_FIXED_FRAME = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename Status_<_tmpl>::ConstantTypes::MODE_ORIENTATION_BODY_FRAME >::Type
    Status_<_tmpl>::MODE_ORIENTATION_BODY_FRAME = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename Status_<_tmpl>::ConstantTypes::MODE_GEO_POI >::Type
    Status_<_tmpl>::MODE_GEO_POI = 3U; // 3

/*
 * Final typedef
 */
typedef Status_<0> Status;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::equipment::gimbal::Status > _uavcan_gdtr_registrator_Status;

}

} // Namespace uavcan
} // Namespace equipment
} // Namespace gimbal

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::equipment::gimbal::Status >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::equipment::gimbal::Status::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::equipment::gimbal::Status >::stream(Stream& s, ::uavcan::equipment::gimbal::Status::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "mode: ";
    YamlStreamer< ::uavcan::equipment::gimbal::Status::FieldTypes::mode >::stream(s, obj.mode, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "body_frame_orientation_xyzw: ";
    YamlStreamer< ::uavcan::equipment::gimbal::Status::FieldTypes::body_frame_orientation_xyzw >::stream(s, obj.body_frame_orientation_xyzw, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "body_frame_orientation_covariance: ";
    YamlStreamer< ::uavcan::equipment::gimbal::Status::FieldTypes::body_frame_orientation_covariance >::stream(s, obj.body_frame_orientation_covariance, level + 1);
}

}

namespace uavcan
{
namespace equipment
{
namespace gimbal
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::equipment::gimbal::Status::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::equipment::gimbal::Status >::stream(s, obj, 0);
    return s;
}

}
}
}