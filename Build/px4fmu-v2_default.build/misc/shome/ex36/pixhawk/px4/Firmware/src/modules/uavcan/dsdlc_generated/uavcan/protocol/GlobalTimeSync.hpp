/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /misc/shome/ex36/pixhawk/px4/Firmware/src/lib/uavcan/dsdl/uavcan/protocol/0.GlobalTimeSync.uavcan
 */

#pragma once

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Global time synchronization.
# Should be UTC time, not GPS time nor local time.
# Any node that publishes timestamped data must use this time reference.
# This message is not intended for unicast transfers.
#

uint16 MAX_PUBLICATION_PERIOD_MS = 1100
uint16 MIN_PUBLICATION_PERIOD_MS = 350

uint16 PUBLISHER_TIMEOUT_MS = 10000

# UTC time in microseconds when the PREVIOUS GlobalTimeSync message was transmitted.
# If this message is the first one, this field must be zero.
uint64 prev_utc_usec
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.protocol.GlobalTimeSync
saturated uint64 prev_utc_usec
saturated uint16 MAX_PUBLICATION_PERIOD_MS = 1100
saturated uint16 MIN_PUBLICATION_PERIOD_MS = 350
saturated uint16 PUBLISHER_TIMEOUT_MS = 10000
******************************************************************************/

#undef prev_utc_usec
#undef MAX_PUBLICATION_PERIOD_MS
#undef MIN_PUBLICATION_PERIOD_MS
#undef PUBLISHER_TIMEOUT_MS

#ifndef UAVCAN_PACK_STRUCTS
# error UAVCAN_PACK_STRUCTS
#endif

namespace uavcan
{
namespace protocol
{

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_BEGIN
#endif

template <int _tmpl>
struct UAVCAN_EXPORT GlobalTimeSync_
{
    typedef const GlobalTimeSync_<_tmpl>& ParameterType;
    typedef GlobalTimeSync_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MAX_PUBLICATION_PERIOD_MS;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MIN_PUBLICATION_PERIOD_MS;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > PUBLISHER_TIMEOUT_MS;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 64, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > prev_utc_usec;
    };

    enum
    {
        MinBitLen
            = FieldTypes::prev_utc_usec::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::prev_utc_usec::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::MAX_PUBLICATION_PERIOD_MS >::Type MAX_PUBLICATION_PERIOD_MS; // 1100
    static const typename ::uavcan::StorageType< typename ConstantTypes::MIN_PUBLICATION_PERIOD_MS >::Type MIN_PUBLICATION_PERIOD_MS; // 350
    static const typename ::uavcan::StorageType< typename ConstantTypes::PUBLISHER_TIMEOUT_MS >::Type PUBLISHER_TIMEOUT_MS; // 10000

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::prev_utc_usec >::Type prev_utc_usec;

    GlobalTimeSync_()
        : prev_utc_usec()
    {
        enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
        ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<64 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 0 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.GlobalTimeSync";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_END
#endif

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool GlobalTimeSync_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        prev_utc_usec == rhs.prev_utc_usec;
}

template <int _tmpl>
bool GlobalTimeSync_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(prev_utc_usec, rhs.prev_utc_usec);
}

template <int _tmpl>
int GlobalTimeSync_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::prev_utc_usec::encode(self.prev_utc_usec, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int GlobalTimeSync_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::prev_utc_usec::decode(self.prev_utc_usec, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature GlobalTimeSync_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x7F0E6D7311FFFA8EULL);

    FieldTypes::prev_utc_usec::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename GlobalTimeSync_<_tmpl>::ConstantTypes::MAX_PUBLICATION_PERIOD_MS >::Type
    GlobalTimeSync_<_tmpl>::MAX_PUBLICATION_PERIOD_MS = 1100U; // 1100

template <int _tmpl>
const typename ::uavcan::StorageType< typename GlobalTimeSync_<_tmpl>::ConstantTypes::MIN_PUBLICATION_PERIOD_MS >::Type
    GlobalTimeSync_<_tmpl>::MIN_PUBLICATION_PERIOD_MS = 350U; // 350

template <int _tmpl>
const typename ::uavcan::StorageType< typename GlobalTimeSync_<_tmpl>::ConstantTypes::PUBLISHER_TIMEOUT_MS >::Type
    GlobalTimeSync_<_tmpl>::PUBLISHER_TIMEOUT_MS = 10000U; // 10000

/*
 * Final typedef
 */
typedef GlobalTimeSync_<0> GlobalTimeSync;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::GlobalTimeSync > _uavcan_gdtr_registrator_GlobalTimeSync;

}

} // Namespace uavcan
} // Namespace protocol

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::protocol::GlobalTimeSync >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::protocol::GlobalTimeSync::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::protocol::GlobalTimeSync >::stream(Stream& s, ::uavcan::protocol::GlobalTimeSync::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "prev_utc_usec: ";
    YamlStreamer< ::uavcan::protocol::GlobalTimeSync::FieldTypes::prev_utc_usec >::stream(s, obj.prev_utc_usec, level + 1);
}

}

namespace uavcan
{
namespace protocol
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::protocol::GlobalTimeSync::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::protocol::GlobalTimeSync >::stream(s, obj, 0);
    return s;
}

}
}