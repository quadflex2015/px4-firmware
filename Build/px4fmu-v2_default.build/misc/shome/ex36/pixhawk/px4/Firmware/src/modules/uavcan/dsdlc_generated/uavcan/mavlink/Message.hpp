/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /misc/shome/ex36/pixhawk/px4/Firmware/src/lib/uavcan/dsdl/uavcan/mavlink/767.Message.uavcan
 */

#pragma once

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Encapsulated MAVLink message.
#

uint8 seq
uint8 sysid
uint8 compid
uint8 msgid

uint8[<256] payload
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.mavlink.Message
saturated uint8 seq
saturated uint8 sysid
saturated uint8 compid
saturated uint8 msgid
saturated uint8[<=255] payload
******************************************************************************/

#undef seq
#undef sysid
#undef compid
#undef msgid
#undef payload

#ifndef UAVCAN_PACK_STRUCTS
# error UAVCAN_PACK_STRUCTS
#endif

namespace uavcan
{
namespace mavlink
{

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_BEGIN
#endif

template <int _tmpl>
struct UAVCAN_EXPORT Message_
{
    typedef const Message_<_tmpl>& ParameterType;
    typedef Message_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > seq;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > sysid;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > compid;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > msgid;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 255 > payload;
    };

    enum
    {
        MinBitLen
            = FieldTypes::seq::MinBitLen
            + FieldTypes::sysid::MinBitLen
            + FieldTypes::compid::MinBitLen
            + FieldTypes::msgid::MinBitLen
            + FieldTypes::payload::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::seq::MaxBitLen
            + FieldTypes::sysid::MaxBitLen
            + FieldTypes::compid::MaxBitLen
            + FieldTypes::msgid::MaxBitLen
            + FieldTypes::payload::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::seq >::Type seq;
    typename ::uavcan::StorageType< typename FieldTypes::sysid >::Type sysid;
    typename ::uavcan::StorageType< typename FieldTypes::compid >::Type compid;
    typename ::uavcan::StorageType< typename FieldTypes::msgid >::Type msgid;
    typename ::uavcan::StorageType< typename FieldTypes::payload >::Type payload;

    Message_()
        : seq()
        , sysid()
        , compid()
        , msgid()
        , payload()
    {
        enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
        ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<2080 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 767 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.mavlink.Message";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_END
#endif

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Message_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        seq == rhs.seq &&
        sysid == rhs.sysid &&
        compid == rhs.compid &&
        msgid == rhs.msgid &&
        payload == rhs.payload;
}

template <int _tmpl>
bool Message_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(seq, rhs.seq) &&
        ::uavcan::areClose(sysid, rhs.sysid) &&
        ::uavcan::areClose(compid, rhs.compid) &&
        ::uavcan::areClose(msgid, rhs.msgid) &&
        ::uavcan::areClose(payload, rhs.payload);
}

template <int _tmpl>
int Message_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::seq::encode(self.seq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::sysid::encode(self.sysid, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::compid::encode(self.compid, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::msgid::encode(self.msgid, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::payload::encode(self.payload, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Message_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::seq::decode(self.seq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::sysid::decode(self.sysid, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::compid::decode(self.compid, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::msgid::decode(self.msgid, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::payload::decode(self.payload, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Message_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xDAAE6BD63CDF6E45ULL);

    FieldTypes::seq::extendDataTypeSignature(signature);
    FieldTypes::sysid::extendDataTypeSignature(signature);
    FieldTypes::compid::extendDataTypeSignature(signature);
    FieldTypes::msgid::extendDataTypeSignature(signature);
    FieldTypes::payload::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Message_<0> Message;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::mavlink::Message > _uavcan_gdtr_registrator_Message;

}

} // Namespace uavcan
} // Namespace mavlink

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::mavlink::Message >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::mavlink::Message::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::mavlink::Message >::stream(Stream& s, ::uavcan::mavlink::Message::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "seq: ";
    YamlStreamer< ::uavcan::mavlink::Message::FieldTypes::seq >::stream(s, obj.seq, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "sysid: ";
    YamlStreamer< ::uavcan::mavlink::Message::FieldTypes::sysid >::stream(s, obj.sysid, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "compid: ";
    YamlStreamer< ::uavcan::mavlink::Message::FieldTypes::compid >::stream(s, obj.compid, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "msgid: ";
    YamlStreamer< ::uavcan::mavlink::Message::FieldTypes::msgid >::stream(s, obj.msgid, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "payload: ";
    YamlStreamer< ::uavcan::mavlink::Message::FieldTypes::payload >::stream(s, obj.payload, level + 1);
}

}

namespace uavcan
{
namespace mavlink
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::mavlink::Message::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::mavlink::Message >::stream(s, obj, 0);
    return s;
}

}
}